var BLE = require("./BLE.min");
import io from "../wxsocket/socketIO";
const config = require("../config/const"),
	request = require("/request"),
	message = require("/message"),
	wxApi = require("/wxApi"),
	Promisify = require("module/es6-Promise");

function toNum(e) {
	for (var o = (e = e.toString()).split(/\D/), t = ["", "0", "00", "000", "0000"].reverse(), n = 0; n < o.length; n++) {
		var s = o[n].length;
		o[n] = t[s] + o[n]
	}
	return o.join("")
}

var INGCART = function (e) {
	this.appkey = e.appkey, this.socket = null, this.topics = [], this.auto_reconnect = e.auto_reconnect || !1, this.appState = !1, this.socket_connected = !1, this.message_ack = {}, this.customID = config.makeId(), this.reconnect_cb = function () {
		console.log("i am reconnect callback!")
	}, this.sessionFinish_cb = function () {
		console.log("i am session finished callback! ")
	}, this.BLE_ServerList = e.BLE_ServerList || wxApi.getStorage("BLE_ServerList") || {}, this.BLE_TARGET = {}, this.BLE_Array = [], this.BLE_INITSTATE = !1, this.BLE_INFO = wxApi.getStorage("BLEInfo") || {}, this.BLE_CONNECTION = !1, this.BLE_RECONNECTION = !1, this.BLE_CHARACTERISTICVALUECHANGE = !1, this.scanBLETimeoutTimer = null, this.BLE_onBluetoothDeviceFound_cb = function () { }, this.BLE_onConnectionStateChanged_cb = function () {
		console.log("i am ble connection state changed callback!")
	}, this.on_data_transmission_cb = function (e) { }, this.sessionInfo = {}, this.sessionState = !1, this.sessionTimer = null, this.LOCATION = {}, this.pubsub = {}
};

INGCART.prototype.init = function (e, o) {
	var t = this;
	e = e || function () { }, o = o || function () { }, t.pubsubFun(t.pubsub), t.BLE_CharacteristicValueChange_cb = function () { }, t.reconnect_cb = function () { }, t.initBluetooth().then(function (e) {
		console.log("Init Bluetooth success")
	}).catch(e => {
		console.log("Init Bluetooth fail", e), message.warning("请打开蓝牙", 3e3, "")
	}), t.onBLECharacteristicValueChange(), wx.onBluetoothAdapterStateChange(function (e) {
		console.log("adapterState changed, now is", e), t.BLE_INITSTATE = e.available, t.BLE_onConnectionStateChanged_cb()
	}), wx.onBLEConnectionStateChange(function (e) {
		console.log(`device ${e.deviceId} state has changed, connected: ${e.connected}`, e), t.BLE_CONNECTION = e.connected, t.BLE_onConnectionStateChanged_cb()
	}), wx.onBluetoothDeviceFound(function (e) {
		t.BLE_onBluetoothDeviceFound_cb(e.devices)
	}), t.repairBleConnectState(), t.socketio_connect(e), t.checkSession()
},

	INGCART.prototype.setSessionFinishCB = function (e) {
		this.sessionFinish_cb = e
	},

	INGCART.prototype.setOnUnlockDataTransmissionListener = function (e) {
		this.on_data_transmission_cb = e
	},

	INGCART.prototype.protectScene = function () {
		return {
			session_state: this.sessionState,
			session_finish_cb: this.sessionFinish_cb,
			ble_onConnectionStateChanged_cb: this.BLE_onConnectionStateChanged_cb,
			on_data_transmission_cb: this.on_data_transmission_cb
		}
	},

	INGCART.prototype.restoreScene = function (e) {
		const o = this;
		for (var t in e) "session_state" == t && (o.sessionState = e[t]), "session_finish_cb" == t && (o.sessionFinish_cb = e[t]), "ble_onConnectionStateChanged_cb" == t && (o.BLE_onConnectionStateChanged_cb = e[t]), "on_data_transmission_cb" == t && (o.on_data_transmission_cb = e[t] || function (e) { })
	},

	INGCART.prototype.repairBleConnectState = function () {
		console.log("get ble connect state at INGCART object init");
		const e = this;
		e.BLE_CONNECTION = !1;
		var o = wxApi.getStorage("BLE_Target");
		wx.getConnectedBluetoothDevices({
			success: function (t) {
				t.devices.forEach(function (t, n) {
					if (t.deviceId == o.deviceId) return console.log("get ble connect state result: true"), void (e.BLE_CONNECTION = !0)
				})
			}
		})
	},

	INGCART.prototype.forceCloseBLEConnectionAndReconnect = function (e) {
		const o = this;
		if (console.log("forceCloseBLEConnectionAndReconnect ble connection: " + o.BLE_CONNECTION), o.BLE_CONNECTION) {
			var t = ",ybl/" + wxApi.getStorage("bikeId"),
				n = {
					u: wxApi.getStorage("userInfo").token,
					a: 3
				},
				s = JSON.stringify(n);
			console.log("重连请求配置", s), o.socket.emit("publish", {
				topic: t,
				msg: s
			})
		} else o.checkBLEConnectionState()
	},

	INGCART.prototype.checkSession = function () {
		const e = this;
		e.getOnceSession(), clearInterval(e.sessionTimer), e.sessionTimer = null, e.sessionTimer = setInterval(function () {
			console.log("checkSession: " + e.sessionTimer), e.getOnceSession()
		}, 15e3)
	},

	INGCART.prototype.getOnceSession = function () {
		const e = this;
		e.getSession().then(function (o) {
			var t = o.data;
			switch (t.status) {
				case 0:
					e.sessionInfo = t.session, wxApi.setStorage("sessionInfo", t.session), e.sessionState = !0, e.checkBLEConnectionState(), e.session_detail(t.session.s).then(function (o) {
						e.pubsub.publish("journey", {
							status: 0,
							msg: o.data.details
						})
					}).catch(e => {
						console.log("Get Session Detail Fail", e)
					});
					break;
				case 1:
					console.log("Check Session status:", 1);
					break;
				case 2:
					console.log("Check Session status:", 2);
					break;
				case 3:
					console.log("session轮询", e.sessionState), 1 == e.sessionState && e.onSessionFinished();
					break;
				case 4:
					console.log("Check Session status:", 4);
					break;
				case 5:
					break;
				default:
					console.log("Check Session status: default")
			}
		}).catch(e => {
			console.log("get Session error", e)
		})
	},

	INGCART.prototype.socketio_connect = function (e) {
		this.socket = io(config.service.wssAddr);
		const o = this;
		this.socket.on("connack", function (t) {
			console.log("socket connack", t, o.socket), 1 == t.success ? (console.log("Connect ingcart succ"), o.socket_connected = !0, e(!0)) : (console.error("Connect ingcart error", t.msg), e(!1))
		}), this.socket.on("close", function (e) {
			console.log("socket close", e)
		}), this.socket.on("error", function (e) {
			console.log("socket error", e)
		}), this.socket.on("connect", function (e) {
			console.log("connect socket");
			config.makeId();
			var t = config.appkey;
			o.socket.emit("connect_v2", {
				appkey: t,
				customid: o.customID
			})
		}), this.socket.on("message", function (e) {
			console.log(`topic:${e.topic};message:${e.msg}`), o.message_ack = e, o.message_cb(o.message_ack)
		}), this.socket.on("disconnect", function (t) {
			o.socket_connected = !1, console.log("socket is disconnnect"), o.auto_reconnect ? (console.log("socket auto reconnect"), o.reconnect_cb = o.reconnect_socket, o.reconnect_cb(), o.reconnect_socket()) : (console.log("socket connect disconnect:", t), e(!1))
		}), this.socket.on("reconnect", function (e) {
			console.log("try to reconnect", e)
		}), this.socket.on("connect_error", function (t) {
			o.socket_connected = !1, o.auto_reconnect || (console.error("socket connect error:", t), e(!1))
		}), this.socket.on("connect_timeout", function (e) {
			console.error("ingcart socket connection timeout", e)
		}), this.socket.on("puback", function (e) {
			console.log("puback success")
		})
	},

	INGCART.prototype.close = function () {
		clearInterval(this.sessionTimer), this.sessionTimer = null, this.topics = [], this.socket.close(), null != this.scanBLETimeoutTimer && clearInterval(this.scanBLETimeoutTimer)
	},

	INGCART.prototype.set_reconnect_cb = function (e) {
		this.reconnect_cb = e
	},

	INGCART.prototype.reconnect_socket = function () {
		this.socket.io.close(), this.socket = null, this.socket = io(config.service.wssAddr), this.socketio_connect(function (e) {
			e ? console.log("socket connect success") : console.log("socket connect fail")
		})
	},

	INGCART.prototype.set_BLE_Array = function (e) {
		this.BLE_Array = this.BLE_Array.concat(e), console.log("test1", this.BLE_Array)
	},

	INGCART.prototype.checkBLEConnectionState = function () {
		const e = this;
		console.log("ble conn: " + e.BLE_CONNECTION, "ble reconn: " + e.BLE_RECONNECTION, "sessionState: " + e.sessionState), 0 == e.BLE_CONNECTION && 0 == e.BLE_RECONNECTION && 1 == e.sessionState && (e.BLE_RECONNECTION = !0, setTimeout(function () {
			var o = wxApi.getStorage("sessionInfo"),
				t = o.l;
			wxApi.setStorage("bikeId", t);
			var n = {
				ble_broadcast_name: o.ble_broadcast_name,
				ble_mac_addr: o.ble_mac_addr,
				lock_type: o.lock_type
			};
			e.BLE_INFO = n, wxApi.setStorage("BLE_Info", n), e.handleBLEInfo(n).then(o => {
				e.scanBLETimeoutTimer = setTimeout(function () {
					e.stopBluetoothDevicesDiscovery(), e.BLE_RECONNECTION = !1
				}, 1e4), wx.closeBluetoothAdapter({
					success: function () {
						console.log("reconnect init bluetooth close adapter success"), wx.openBluetoothAdapter({
							success: function (o) {
								console.log("reconnect init bluetooth open adapter success", o), e.startBluetoothDevicesDiscovery(e.scanBLE_cb)
							}, fail: function (e) {
								console.log("reconnect init bluetooth adapter fail", e)
							}
						})
					}, fail: function () {
						console.log("reconnect init bluetooth close adapter fail"), wx.openBluetoothAdapter({
							success: function (o) {
								console.log("reconnect init bluetooth open adapter success"), e.startBluetoothDevicesDiscovery(e.scanBLE_cb)
							}, fail: function (e) {
								console.log("reconnect init bluetooth open adapter fail", e)
							}
						})
					}
				})
			}).catch(e => {
				if (void 0 !== e.errMsg) switch (e.errMsg) {
					case "BLE_Connected":
						console.log("蓝牙已连接")
				}
			})
		}, 0))
	},

	INGCART.prototype.scanBLE_cb = function (e) {
		const o = this;
		console.log("scan ble callback ", e), o.handleBLEFound(e).then(e => {
			if (null == o.scanBLETimeoutTimer) throw {
				errMsg: "in connecting"
			};
			return clearTimeout(o.scanBLETimeoutTimer), o.stopBluetoothDevicesDiscovery(), o.scanBLETimeoutTimer = null, o.createBLEConnection({
				deviceId: e.deviceId
			})
		}).then(e => (console.log("Reconnect success", e), o.BLE_RECONNECTION = !1, o.getBLEDeviceServices({
			deviceId: wxApi.getStorage("BLE_Target").deviceId || o.BLE_TARGET.deviceId
		}))).then(e => {
			var t = {
				deviceId: wxApi.getStorage("BLE_Target").deviceId || o.BLE_TARGET.deviceId,
				serviceId: wxApi.getStorage("BLE_ServerList").SERVICE_UUID || o.BLE_ServerList.SERVICE_UUID
			};
			return o.getBLEDeviceCharacteristics(t)
		}).then(e => {
			var t = wxApi.getStorage("BLE_Target").deviceId || o.BLE_TARGET.deviceId || e.deviceId,
				n = wxApi.getStorage("BLE_ServerList") || o.BLE_ServerList,
				s = {
					deviceId: t,
					serviceId: n.SERVICE_UUID,
					characteristicId: n.READ_DATA_UUID,
					state: !0
				};
			console.log("notify object", s), o.notifyBLECharacteristicValueChange(s)
		}).then(e => {
			console.log("notify", e);
			var t = ",ybl/" + wxApi.getStorage("bikeId"),
				n = {
					u: wxApi.getStorage("userInfo").token,
					a: 3
				},
				s = JSON.stringify(n);
			console.log("重连请求配置", s), o.socket.emit("publish", {
				topic: t,
				msg: s
			})
		}).catch(e => {
			if (console.log("Reconnect fail err:", e), void 0 !== e.errMsg) {
				switch (e.errMsg) {
					case "BLE_Connected":
						console.log("蓝牙已连接")
				}
				switch (e.errCode) {
					case 10003:
						o.BLE_RECONNECTION = !1
				}
			}
		})
	},

	INGCART.prototype.session_detail = function (e) {
		var o = {
			url: config.BASE_URL.URL_SESSION_DETAIL,
			data: {
				sid: e
			}
		};
		return request.GET(o)
	},

	INGCART.prototype.scanCode = function (e) {
		return new Promisify(function (o, t) {
			(e = e || {}).success = function (e) {
				o(e)
			}, e.fail = function (e) {
				t(e)
			}, wx.scanCode(e)
		})
	},

	INGCART.prototype.requestBLEInfo = function (e) {
		return request.GET(e)
	},

	INGCART.prototype.handleBLEInfo = function (e) {
		const o = this;
		return new Promisify(function (t, n) {
			if (e) {
				console.log("BLEInfo: ", e);
				var s = {};
				try {
					s.BLE_Name = e.ble_broadcast_name.slice(0, 8) || "", s.MAC_Address = e.ble_mac_addr || ""
				} catch (c) {
					(c = c || {}).errMsg = "NoBLEInfoData", n(c)
				}
				switch (e.lock_type) {
					case 5:
						o.BLE_ServerList = config.BLEServerUUIDList_xingfu, wxApi.setStorage("BLE_ServerList", config.BLEServerUUIDList_xingfu), t(s);
						break;
					case 6:
						console.warn("wulianlock"), o.BLE_ServerList = config.BLEServerUUIDList_xingfu, wxApi.setStorage("BLE_ServerList", config.BLEServerUUIDList_xingfu), console.log(o.BLE_ServreList), t(s);
						break;
					default:
						console.warn("ingcartlock"), o.BLE_ServerList = config.BLEServerUUIDList, wxApi.setStorage("BLE_ServerList", config.BLEServerUUIDList), t(s)
				}
			} else {
				var c = {
					errMsg: "NoBLEInfoData"
				};
				n(c)
			}
		})
	},

	INGCART.prototype.initBluetooth = function () {
		return new Promisify(function (e, o) {
			var t = {
				success: function (o) {
					e(o)
				}, fail: function (e) {
					o(e)
				}
			};
			wx.openBluetoothAdapter(t)
		})
	},

	INGCART.prototype.getBluetoothAdapterState = function () {
		return new Promisify(function (e, o) {
			var t = {
				success: function (o) {
					e(o)
				}, fail: function (e) {
					o(e)
				}
			};
			wx.getBluetoothAdapterState(t)
		})
	},

	INGCART.prototype.startBluetoothDevicesDiscovery = function (e) {
		const o = this;
		return o.BLE_onBluetoothDeviceFound_cb = e, console.log("startBluetoothDevicesDiscovery"), new Promisify(function (e, t) {
			var n = wxApi.getStorage("BLE_ServerList").SERVICE_UUID || o.BLE_ServerList.SERVICE_UUID;
			o.getSysInfo().then(function (s) {
				var c = s.system,
					i = s.platform;
				"android" == i ? o.cpr_version(c, "Android 6.0.0") ? wx.startBluetoothDevicesDiscovery({
					services: [n],
					allowDuplicatesKey: !1,
					interval: 0,
					success: e,
					fail: t
				}) : wx.startBluetoothDevicesDiscovery({
					allowDuplicatesKey: !1,
					success: function (o) {
						e(o)
					}, fail: function (e) {
						t(e)
					}
				}) : "ios" == i && wx.startBluetoothDevicesDiscovery({
					services: [n],
					allowDuplicatesKey: !1,
					interval: 0,
					success: e,
					fail: t
				})
			})
		})
	},

	INGCART.prototype.stopBluetoothDevicesDiscovery = function () {
		return new Promisify(function (e, o) {
			console.log("stopBluetoothDevicesDiscovery"), wx.stopBluetoothDevicesDiscovery({
				success: e,
				fail: o
			})
		})
	},

	INGCART.prototype.getBluetoothDevices = function () {
		return new Promisify(function (e, o) {
			wx.getBluetoothDevices({
				success: e,
				fail: o
			})
		})
	},

	INGCART.prototype.handleBLEFound = function (e) {
		const o = this;
		return 5 == o.BLE_INFO.lock_type ? o.handleXingfuLockFound(e) : 6 == o.BLE_INFO.lock_type ? (console.warn("handleWuLianLockFound", e), o.handleXingfuLockFound(e)) : o.handleIngcartLockFound(e)
	},

	INGCART.prototype.handleIngcartLockFound = function (e) {
		const o = this;
		let t = e.length;
		o.BLE_TARGET = null;
		for (var n = {}, s = 0; s <= t; s++)
			if (void 0 !== (n = e[s])) {
				var c = "",
					i = "";
				try {
					if ("未知设备" !== n.name || "未知设备" !== n.localName) {
						if (i = null != n.localName ? n.localName : "", c = null != c ? n.name : "", i == o.BLE_INFO.ble_broadcast_name || c == o.BLE_INFO.ble_broadcast_name) {
							o.BLE_TARGET = n, wxApi.setStorage("BLE_Target", n);
							break
						}
						o.BLE_TARGET = null
					}
				} catch (e) {
					console.log("handleIngcartLockFound error", e)
				}
			}
		return new Promisify(function (e, t) {
			console.log("查找目标蓝牙", o.BLE_TARGET, typeof o.BLE_TARGET, o.BLETARGET == {}), null != o.BLE_TARGET ? e(n) : t({
				errMsg: "findBLETargetFail"
			})
		})
	},

	INGCART.prototype.handleXingfuLockFound = function (e) {
		const o = this;
		e.length;
		o.BLE_TARGET = null;
		for (var t = {}, n = 0; n < e.length; n++) {
			t = e[n];
			var s = o.buff2hex(t.advertisData);
			s = (s = s.toUpperCase()).slice(4, 16).split("");
			var c = "";
			if (s.forEach((e, o) => {
				c += (o + 1) % 2 == 0 ? e + ":" : e
			}), (s = c) == o.BLE_INFO.ble_mac_addr + ":") {
				o.BLE_TARGET = t, wxApi.setStorage("BLE_Target", t);
				break
			}
			o.BLE_TARGET = null
		}
		return new Promisify(function (e, n) {
			null != o.BLE_TARGET ? e(t) : n({
				errMsg: "findBLETargetFail"
			})
		})
	},

	INGCART.prototype.createBLEConnection = function (e) {
		let o = e.deviceId;
		return new Promisify(function (e, t) {
			wx.createBLEConnection({
				deviceId: o,
				success: function (o) {
					e(o)
				}, fail: function (e) {
					t(e)
				}
			})
		})
	},

	INGCART.prototype.closeBLEConnection = function (e) {
		const o = this;
		return new Promisify(function (t, n) {
			wx.closeBLEConnection({
				deviceId: e,
				success: function (e) {
					o.BLE_INITSTATE = !1, t(e)
				}, fail: function (e) {
					o.BLE_INITSTATE = !1, n(e)
				}
			})
		})
	},

	INGCART.prototype.getConnectedBluetoothDevices = function (e) {
		const o = this;
		return new Promisify(function (t, n) {
			(e = e || {}).success = function (e) {
				t(e)
			}, e.fail = function (e) {
				o.BLE_INITSTATE = !1, n(e)
			}, wx.getConnectedBluetoothDevices(e)
		})
	},

	INGCART.prototype.getBLEDeviceServices = function (e) {
		return new Promisify(function (o, t) {
			(e = e || {}).success = function (e) {
				o(e)
			}, e.fail = function (e) {
				t(e)
			}, wx.getBLEDeviceServices(e)
		})
	},

	INGCART.prototype.getBLEDeviceCharacteristics = function (e) {
		return new Promisify(function (o, t) {
			(e = e || {}).success = function (e) {
				o(e)
			}, e.fail = function (e) {
				t(e)
			}, wx.getBLEDeviceCharacteristics(e)
		})
	},

	INGCART.prototype.readBLE = function (e) {
		const o = this;
		return new Promisify(function (t, n) {
			var s = wxApi.getStorage("BLE_Target").deviceId || o.BLE_TARGET.deviceId,
				c = o.BLE_ServerList || wxApi.getStorage("BLE_ServerList");
			(e = e || {}).success = function (e) {
				t(e)
			}, e.fail = function (e) {
				n(e)
			}, e.deviceId = s, e.serviceId = c.SERVICE_UUID, e.characteristicId = c.READ_DATA_UUID, wx.readBLECharacteristicValue(e)
		})
	},

	INGCART.prototype.writeBLE = function (e) {
		const o = this;
		return new Promisify(function (t, n) {
			var s = wxApi.getStorage("BLE_Target").deviceId || o.BLE_TARGET.deviceId,
				c = wxApi.getStorage("BLE_ServerList") || o.BLE_ServerList,
				i = new Uint8Array(e.match(/[\da-f]{2}/gi).map(function (e) {
					return parseInt(e, 16)
				})).buffer,
				r = {};
			r.deviceId = s, r.serviceId = c.SERVICE_UUID, r.characteristicId = c.WRITE_DATA_UUID, r.value = i, r.success = function (e) {
				t(e)
			}, r.fail = function (e) {
				n(e)
			}, console.log("Write BLE Config", r), wx.writeBLECharacteristicValue(r)
		})
	},

	INGCART.prototype.notifyBLECharacteristicValueChange = function (e) {
		return new Promisify(function (o, t) {
			(e = e || {}).success = function (e) {
				o(e)
			}, e.fail = function (e) {
				t(e)
			}, wx.notifyBLECharacteristicValueChange(e)
		})
	},

	INGCART.prototype.onBLECharacteristicValueChange = function () {
		const e = this;
		console.log("打开蓝牙监听,只能出现一次"), e.on_data_transmission_cb(!0), wx.onBLECharacteristicValueChange(function (o) {
			var t = o.value,
				n = Array.prototype.map.call(new Uint8Array(t), e => ("00" + e.toString(16)).slice(-2)).join("");
			e.socket.emit("publish", {
				topic: ",yble",
				msg: n
			})
		})
	},

	INGCART.prototype.publish = function (e) {
		e = e || {};
		try {
			e.msg = JSON.stringify(e.msg)
		} catch (o) {
			e.msg = e.msg
		}
		console.log("socket publish", e), this.socket.emit("publish", e)
	},

	INGCART.prototype.getConfig = function () {
		var e = {
			url: config.BASE_URL.URL_CONFIG,
			data: {
				appkey: config.appkey
			},
			header: {
				"X-AUTH-TOKEN": wxApi.getStorage("userInfo").token
			}
		};
		return request.getConfig(e)
	},

	INGCART.prototype.getOpenId = function () {
		return wxApi.getOpenId(config.appkey)
	},

	INGCART.prototype.buff2hex = function (e) {
		return Array.prototype.map.call(new Uint8Array(e), e => ("00" + e.toString(16)).slice(-2)).join("")
	},

	INGCART.prototype.hex2buff = function (e) {
		return new Uint8Array(e.match(/[\da-f]{2}/gi)).map(function (e) {
			return parseInt(e, 16)
		}).buffer
	},

	INGCART.prototype.pubsubFun = function (e) {
		const o = this;
		var t = -1;
		e.subscribe = function (e, n) {
			if (o.topics[e]) return o.topics[e][0].func = n, o.topics[e][0].token;
			o.topics[e] = [];
			var s = (++t).toString();
			return o.topics[e].push({
				token: s,
				func: n
			}), s
		}, e.publish = function (e, t) {
			return !!o.topics[e] && (setTimeout(function () {
				for (var n = o.topics[e], s = n ? n.length : 0; s--;) n[s].func(e, t)
			}, 0), !0)
		}, e.unsubscribe = function (e) {
			for (var t in o.topics)
				if (o.topics[t])
					for (var n = 0, s = o.topics[t].length; n < s; n++)
						if (o.topics[t][n].token === e) return o.topics[t].splice(n, 1), !0;
			return !1
		}
	},

	INGCART.prototype.message_cb = function (e) {
		const o = this;
		var t = {};
		switch (console.log("message callback: ", e), e.topic) {
			case ",yble":
				console.log(",yble", e.msg), t = e.msg, o.lockCommand(t);
				break;
			case ",yblc":
				console.log(",yblc", e.msg), t = "string" == typeof e.msg ? JSON.parse(e.msg) : e.msg
		}
		if (void 0 !== t.status) {
			var n = wxApi.getStorage("BLE_Target") || o.BLE_TARGET;
			switch (0 != t.status && 13 != t.status && 29 != t.status && o.onUnlockFailed(), t.status) {
				case 0:
					console.log("开锁成功", t), 
					wx.setStorageSync(wx.getStorageSync('unlockingQR'), 'unlock_success');
					o.pubsub.publish("unlocking", {
						status: 0,
						msg: "unlockingSuccess"
					});
					break;
				case 4:
					console.log("Insuffient balance"), 
					wx.setStorageSync(wx.getStorageSync('unlockingQR'), 'unlock_fail');
					o.pubsub.publish("unlocking", {
						status: 4,
						msg: "insuffientBalance"
					});
					break;
				case 5:
					o.closeBLEConnection(n.deviceId).then(function (e) {
						console.log("token失效")
					}).catch(e => {
						console.log("开锁检测,但关闭蓝牙连接失败：", e)
					});
					break;
				case 13:
					console.log("骑行状态", t), o.onSessionFinished();
					break;
				case 26:
					console.log("unlockFailed"), 
					wx.setStorageSync(wx.getStorageSync('unlockingQR'), 'unlock_fail');
					o.pubsub.publish("unlocking", {
						status: 26,
						msg: "unlockFailed"
					});
					break;
				case 29:
					console.log("重连状态", t), "0" == t.desc ? o.onSessionFinished() : "1" == t.desc && message.warning("锁已打开", 3e3, "");
					break;
				default:
					o.pubsub.publish("unlocking", {
						status: t.status,
						msg: "other error"
					}), console.log("*****test4*****", t)
			}
		}
	},

	INGCART.prototype.lockCommand = function (e) {
		const o = this;
		o.writeBLE(e).then(function (e) {
			o.on_data_transmission_cb(!1), console.log("Write lock command success", e), o.pubsub.publish("unlocking", {
				status: 1,
				persent: 10
			})
		}).catch(e => {
			console.log("write command error", e);
			var t = wxApi.getStorage("BLE_Target").deivceId || o.BLE_TARGET.deviceId;
			1 == o.BLE_RECONNECTION && 1 == o.sessionState && o.BLE_RECONNECTION, o.closeBLEConnection(t)
		})
	},

	INGCART.prototype.getSession = function () {
		var e = {
			url: config.BASE_URL.URL_SESSION,
			method: "GET",
			header: {
				"content-type": "application/json",
				"X-Auth-Token": wxApi.getStorage("userInfo").token
			}
		};
		return request.GET(e)
	},

	INGCART.prototype.requestUserInfo = function (e) {
		e = e || wxApi.getStorage("userInfo").token;
		var o = {
			url: config.BASE_URL.URL_EXTRA,
			data: {
				appkey: config.appkey
			},
			header: {
				"X-AUTH-TOKEN": e
			}
		};
		return request.GET(o)
	},

	INGCART.prototype.refundDeposit = function (e) {
		var o = o || wxApi.getStorage("userInfo").token;
		return new Promisify(function (t, n) {
			(e = e || {}).url = config.BASE_URL.URL_REFUND_DEPOSIT, e.header = {
				"X-AUTH-TOKEN": o
			}, e.success = function (e) {
				t(e)
			}, e.fail = function (e) {
				n(e)
			}, request.post(e)
		})
	},

	INGCART.prototype.payment = function (e) {
		if (void 0 !== e.data.openid) {
			var o = (new Date).valueOf(),
				t = config.makeId() + o.toString();
			wxApi.getStorage("userInfo").token;
			return e.url = config.BASE_URL.URL_PAYMENT, e.data.signature = t, e.data.type = e.data.type, e.data.pay_type = 8, e.header = {
				"X-AUTH-TOKEN": wxApi.getStorage("userInfo").token,
				"Content-Type": "application/json"
			}, console.log("obj", e), request.POST(e)
		}
		wxApi.showModal({
			title: "提示",
			content: "微信支付错误，请退出微信重试",
			confirmColor: "#ff0000",
			confirmText: "确认",
			cancelColor: "#00ff00",
			cancelText: "取消"
		}).then(function (e) {
			e.confirm ? wxApi.redirectTo("../index/index") : wxApi.redirectTo("../deposit/deposit")
		}).catch(e => {
			console.log("err in ingcart payDeposit")
		})
	},

	INGCART.prototype.getSysInfo = function (e) {
		return new Promisify(function (o, t) {
			(e = e || {}).success = function (e) {
				o(e)
			}, e.fail = function (e) {
				t(e)
			}, wx.getSystemInfo(e)
		})
	},

	INGCART.prototype.cpr_version = function (e, o) {
		var t = toNum(e),
			n = toNum(o);
		return t == n || (t > n || !(t < n) && void 0)
	},

	INGCART.prototype.onSessionFinished = function () {
		const e = this;
		e.sessionFinish_cb(), e.sessionState = !1, clearInterval(e.sessionTimer), e.sessionTimer = null;
		var o = wxApi.getStorage("BLE_Target") || e.BLE_TARGET;
		setTimeout(function () {
			e.BLE_INITSTATE = !1, e.closeBLEConnection(o.deviceId).then(function (e) {
				console.log("行程结束")
			})
		}, 2e3)
	},

	INGCART.prototype.onUnlockFailed = function () {
		const e = this;
		if (null != e.sessionTimer && (clearInterval(e.sessionTimer), e.sessionTimer = null), e.BLE_CONNECTION) {
			var o = wxApi.getStorage("BLE_Target") || e.BLE_TARGET;
			e.closeBLEConnection(o.deviceId)
		}
	};


var reinit = function (e) {
	var o = {};
	null != e.ingcart && (o = e.ingcart.protectScene()), null != e.ingcart && (e.ingcart.close(), wx.closeSocket(), delete e.ingcart, e.ingcart = null, wx.closeSocket()), e.ingcart = new INGCART({
		appkey: config.appkey
	}), e.ingcart.init(function (e) {
		e ? console.log("socket connect success") : console.log("socket connect fail")
	}), e.ingcart.restoreScene(o), null != e.sessionTimer && (clearInterval(e.sessionTimer), e.sessionTimer = null)
};


module.exports = {
	INGCART: INGCART,
	reinit: reinit
};